use runtime;

type Foo {}

@expose
fn foo() {
  return Foo {};
}

@expose
fn identity(x: any?): any? {
  return x;
}

@expose
fn int(): int {
  return 42;
}

@expose
fn float(): float {
  return 3.14;
}

@expose
fn bool(): bool {
  return true;
}

@expose
fn string(): String {
  return "hello world";
}

@expose
fn empty_array(): Array {
  return [];
}

@expose
fn int_array(): Array<int> {
  return [1, 10, 100];
}

@expose
fn float_array(): Array {
  return [0.5, 1.0, 1.5];
}

@expose
fn map(): Map<any, String> {
  var map = Map<any, String>::new();
  map.set(0, "key=0");
  map.set("hello", "key=\"hello\"");
  return map;
}

@expose
fn throw() {
  throw "custom error message";
}

@expose
fn inline_object() {
  return { name: "GreyCat", type: "Database", version: 6.0 };
}

type Person {
  name: String;
  age: int;
}

@expose
fn person(): Person {
  return Person { name: "John", age: 42 };
}

@expose
fn enum_value(): TimeZone {
  return TimeZone::Europe_Paris;
}

@expose
fn time(): time {
  return 42_time;
}

@expose
fn duration(): duration {
  return 42_min;
}

@expose
fn geo(): geo {
  return geo::new(49.59633210916421, 6.128472726330299);
}

@expose
@write
fn node(): node<int> {
  return node::new(42);
}

@expose
@write
fn nodeTime(): nodeTime<int> {
  var n = nodeTime::newAt(0_time, 0);
  n.setAt(1_time, 10);
  n.setAt(2_time, 100);
  return n;
}

@expose
@write
fn nodeList(): nodeList {
  return nodeList::new();
}

@expose
@write
fn nodeGeo(): nodeGeo {
  return nodeGeo::new();
}

@expose
@write
fn nodeIndex(): nodeIndex {
  return nodeIndex::new();
}

@expose
fn table(): Table {
  var table = Table::new(4, true);
  for (var row = 0; row < 5; row++) {
    for (var col = 0; col < 4; col++) {
      table.set(row, col, "row ${row} col ${col}");
    }
  }
  return table;
}

@expose
fn me(): User {
  return User::me();
}

@expose
fn say(msg: String): String {
  return "Hello, ${msg}";
}

@expose
task myTask() {}
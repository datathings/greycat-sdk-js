var n: node<String>?;
var nt: nodeTime<String>?;
var nl: nodeList<String>?;
var ni: nodeIndex<String, float>?;
var ng: nodeGeo<String>?;

type FloatPrecisionTest {
  normal: float;
  @precision(0.01)
  precision: float;
}

fn main() {
  write_std(GcbWriter { path: "project.test.gcb" });

  n ?= node<String> { "Hello, world!" };
  if (nt == null) {
    nt = nodeTime<String> {};
    nt.setAt('2024-01-01T00:00:00Z', "first day");
    nt.setAt('2024-01-02T00:00:00Z', "second day");
  }
  if (nl == null) {
    nl = nodeList<String> {};
    nl.add("first");
    nl.add("second");
    nl.add("third");
  }
  if (ni == null) {
    ni = nodeIndex<String, float> {};
    ni.set("sensor-0", 14.3);
    ni.set("sensor-1", 28.36);
    ni.set("sensor-2", 5.1);
  }
  if (ng == null) {
    ng = nodeGeo<String> {};
    ng.set(geo { 1, 2 }, "first");
    ng.set(geo { 1.2, 1.3 }, "second");
  }
}

fn write_std(out: GcbWriter) {
  write_std_core(out);
  write_std_io(out);
  write_std_runtime(out);
  write_std_util(out);
}

fn write_std_core(out: GcbWriter) {
  out.write(true);
  // 1 byte
  out.write(0);
  out.write(1);
  out.write(-1);
  out.write(63);
  out.write(-64);
  // 2 bytes
  out.write(64);
  out.write(-65);
  out.write(8191);
  out.write(-8192);
  // 3 bytes
  out.write(8192);
  out.write(-8193);
  out.write(1048575);
  out.write(-1048576);
  // 4 bytes
  out.write(1048576);
  out.write(-1048577);
  out.write(134217727);
  out.write(-134217728);
  // 5 bytes
  out.write(134217728);
  out.write(-134217729);
  out.write(17179869183);
  out.write(-17179869184);
  // 6 bytes
  out.write(17179869184);
  out.write(-17179869185);
  out.write(2199023255551);
  out.write(-2199023255552);
  // 7 bytes
  out.write(2199023255552);
  out.write(-2199023255553);
  out.write(281474976710655);
  out.write(-281474976710656);
  // 8 bytes
  out.write(281474976710656);
  out.write(-281474976710657);
  out.write(36028797018963967);
  out.write(-36028797018963968);
  // 9 bytes
  out.write(36028797018963968);
  out.write(-36028797018963969);
  out.write(9223372036854775807);
  out.write(-9223372036854775808);
  out.write(13.37);
  out.write(42.0); // looks-like-int-float
  out.write("Hello world");
  out.write("${"Hello world"}");
  out.write(12_us);
  out.write(12_time);
  out.write([]);
  out.write([42, true, "hello", CalendarUnit::month]);
  out.write(geo {49.59634473860023, 6.128470332224678});
  out.write(Map<any, any?> {});
  out.write(project::table);
  out.write(FloatPrecisionTest { normal: 3.14, precision: 3.141516 });
  out.write(Buffer {});

  var map = Map<any, any?> {};
  map.set(42, 42);
  map.set(true, true);
  map.set("hello", "hello");
  map.set(CalendarUnit::month, CalendarUnit::month);
  out.write(map);

  out.write(CustomType { string: "hello", int: 42, float: 3.14, bool: true, char: 'c', enum: TimeZone::Europe_Luxembourg });
  out.write(GeoBox { sw: geo {1, 2}, ne: geo {1.5, -0.5} });
  out.write(nodeList<int> {});
  out.write(TimeZone::Europe_Luxembourg);
  out.write(node<float> { 13.37 });
  out.write(Error { message: "an error", stack: Array<ErrorFrame> {} });
  out.write(ErrorCode::none);
  out.write(SamplingMode::adaptative);
  out.write(DurationUnit::days);
  out.write(TensorType::c128);
  out.write(Table<any> {
      [0, 0.5, Named { name: "one" }],
      [1, 1.5, Named { name: "two" }],
      [2, 2.5, Named { name: "three" }],
      [3, 3.5, Named { name: "four" }],
    });
  out.write(Tensor {});
  var tensor = Tensor {};
  tensor.init(TensorType::f64, Array<int> {1, 1});
  tensor.add(Array<int> {0, 0}, 3.14);
  out.write(tensor);
  out.write(GeoCircle { center: geo {49.59634473860023, 6.128470332224678}, radius: 13.37 });
  out.write(Date { year: 2012, month: 12, day: 12, hour: 12, minute: 12, second: 12, microsecond: 120012 });
  out.write(nodeTime<nodeGeo> {});
  out.write(Array<nodeTime> {});
  out.write(([], Map<any, any?> {}));
  out.write(Tuple { x: 42, y: "hello" });
  out.write(nodeIndex<Tuple, any?> {});
  out.write(GeoPoly { points: Array<geo> {geo {1, 2}, geo {1.5, 2.01}, geo {1, 2}} });
  out.write(CalendarUnit::day);
  out.write(nodeGeo<CalendarUnit> {});
  out.write(t2 {13, 37});
  out.write(t3 {13, 37, 42});
  out.write(t4 {13, 37, 42, 12});
  out.write(str {"helloworld"});
  out.write(t2f {13.37, 12.42});
  out.write(t3f {13.37, 12.42, -13.37});
  out.write(t4f {13.37, 12.42, -13.37, -12.42});
  out.write(MathConstants::e);
  out.write(MathConstants::log_2e);
  out.write(MathConstants::log_10e);
  out.write(MathConstants::ln2);
  out.write(MathConstants::ln10);
  out.write(MathConstants::pi);
  out.write(MathConstants::pi_2);
  out.write(MathConstants::pi_4);
  out.write(MathConstants::m1_pi);
  out.write(MathConstants::m2_pi);
  out.write(MathConstants::m2_sqrt_pi);
  out.write(MathConstants::sqrt2);
  out.write(MathConstants::sqrt1_2);
}

fn write_std_io(out: GcbWriter) {
  // out.write(out); // unsupported
  // out.write(AbiReader::new("out.gcb")); // segfault
  out.write(TextEncoder::plain);
  out.write(CsvColumnString {});
  out.write(CsvColumnInteger {});
  out.write(CsvColumnFloat {});
  out.write(CsvColumnBoolean {});
  out.write(CsvColumnTime {});
  out.write(CsvColumnDate {});
  out.write(CsvColumnIgnored {});
  out.write(CsvFormat {
      header_lines: 12,
      separator: ',',
      string_delimiter: '"',
      decimal_separator: '.',
      thousands_separator: '_',
      columns: Array<CsvColumn> {},
      // columns_size: null,
    });
  // out.write(File::open("project.gcl")); // unsupported
  // out.write(Directory::open(".")); // unsupported
  // out.write(FileWriter::new("project.gcl", true)); // unsupported
}

fn write_std_runtime(out: GcbWriter) {
  out.write(Task {
      user_id: 13,
      task_id: 37,
      mod: "",
      type: "",
      fun: "",
      creation: 42_time,
      status: TaskStatus::empty,
    });
  out.write(TaskStatus::cancelled);
  out.write(Runtime {});
  out.write(RuntimeInfo {
      version: "",
      arch: "",
      timezone: TimeZone::Europe_Luxembourg,
      license: License {
        start: 13_time,
        end: 37_time,
        max_memory: 12,
      },
      io_threads: 13,
      bg_threads: 37,
      fg_threads: 42,
      mem_total: 12,
      mem_worker: 0,
      nb_ctx: 1,
    });
  out.write(SecurityFields {});
  out.write(UserGroup {
      id: 12,
      name: "",
      activated: false,
    });
  out.write(OpenIDConnect {
      url: "",
      clientId: "",
    });
  out.write(UserRole {
      name: "",
      permissions: Array<String> {},
    });
  out.write(PeriodicTask {
      function: project::float_f,
      arguments: Array<any?> {3.14},
      user_id: 12,
      start: 13_time,
      every: duration::new(37, DurationUnit::microseconds),
    });
  out.write(User {
      id: 12,
      name: "",
      activated: false,
      external: true,
    });
  out.write(UserGroupPolicy {
      group_id: 12,
      type: UserGroupPolicyType::execute,
    });
  out.write(UserGroupPolicyType::read);
  out.write(License {
      start: 13_time,
      end: 37_time,
      max_memory: 12,
    });
  out.write(StoreStat {
      capacity_bytes: 13,
      allocated_bytes: 37,
      allocated_ratio: 13.37,
      remained_bytes: 12,
      remained_ratio: 4.20,
      used_bytes: 42,
      used_ratio: 0.1,
      available_bytes: 0,
      available_ratio: 0.2,
    });
  out.write(System {});
  out.write(SecurityPolicy {});
}

fn write_std_util(out: GcbWriter) {
  out.write(Random {
      seed: 42,
      v: 13.37,
    });
  out.write(Assert {});
  out.write(ProgressTracker { start: 0_time });
  var gaussian = Gaussian {};
  gaussian.add(5.0);
  gaussian.add(2.0);
  gaussian.add(0.0);
  out.write(gaussian);
  // var quantizer = Quantizer {
  //   dimensions: [DenseScale { min: 0, max: 10, step: 1 }]
  // };
  // out.write(quantizer);
  // var hist = Histogram { quantizer: quantizer };
  // hist.add([0], 1.0);
  // hist.add([1], 2.0);
  // hist.add([2], 3.0);
  // hist.add([3], 4.0);
  // hist.add([4], 3.0);
  // hist.add([5], 2.0);
  // hist.add([6], 1.0);
  // out.write(hist);
  // out.write(GaussianProfile { quantizer: quantizer, precision: FloatPrecision::p100 });
  out.write(time_window());
  out.write(SlidingWindow { capacity: 10 });
  var q = Queue<int> { values: Array<int> {4, 3, 2}, capacity: 3 };
  q.push(42);
  out.write(q);
  var stack = Stack<String> { values: Array<String> {"one", "two", "three"} };
  stack.pop();
  out.write(stack);
  out.write(Crypto {});
}

fn time_window() {
  var window = TimeWindow { width: 3_s };
  window.add(0_time, 1);
  window.add(1_time, 1000);
  window.add(2_time, 100_000);
  window.add(3_time, 999_999_999);
  window.add(4_time, 42);
  return window;
}

@expose
fn map(): Map {
  return Map<any, any> {
    "hello world": 42,
    1337: Named { name: "object" },
  };
}

@expose
fn array(): Array {
  return Array<any?> {"hello world", 42, Named { name: "object" }, false};
}

@expose
fn array2() {
  return [42, true, "hello", CalendarUnit::month];
}

@expose
fn array3() {
  return [false, 42, "main", null];
}

@expose
fn array_mono(): Array<int> {
  return Array<int> {2, 2, 2, 2};
}

@expose
fn array_mono2(): Array<bool> {
  var tu = (42, "hello");

  return Array<bool> {false, false};
}

@expose
fn table() {
  return Table<any> {
    [0, 0.5, Named { name: "one" }],
    [1, 1.5, Named { name: "two" }],
    [2, 2.5, Named { name: "three" }],
    [3, 3.5, Named { name: "four" }],
  };
}

fn write_table() {
  GcbWriter { path: "table.gcb" }.write(Table<any> {
      [0, 0.5, Named { name: "one" }],
      [1, 1.5, Named { name: "two" }],
      [2, 2.5, Named { name: "three" }],
      [3, 3.5, Named { name: "four" }],
    });
}

fn write_table_cols() {
  GcbWriter { path: "table_0.gcb" }.write([0, 1, 2, 3]);
  GcbWriter { path: "table_1.gcb" }.write([0.5, 1.5, 2.5, 3.5]);
  GcbWriter { path: "table_2.gcb" }.write([
      Named { name: "one" },
      Named { name: "two" },
      Named { name: "three" },
      Named { name: "four" },
    ]);
}

@expose
fn longTask() {
  println("long fn ${Task::id()}: start");
  Runtime::sleep(15_s);
  println("long fn ${Task::id()}: done");
}

@expose
fn slowTask() {
  // slow
  var start = time::now();
  for (var i = 0; i < 1_000_000; i++) {}
  return time::now() - start;
}

@expose
fn computeTask() {
  var writer = TextWriter { path: "${File::taskDir()}/foo.txt" };
  writer.write(42);
}

@expose
fn testTensor(): Tensor {
  var t = Tensor {};
  t.init(TensorType::f64, Array<int> {2, 10});
  for (var a = 0; a < 2; a++) {
    for (var b = 0; b < 10; b++) {
      t.add(Array<int> {a, b}, a + b * 1.0);
    }
  }
  return t;
}

@expose
fn tensor() {
  return Tensor {};
}

@expose
fn tensor2() {
  var tensor = Tensor {};
  tensor.init(TensorType::f64, Array<int> {1, 5});
  tensor.add(Array<int> {0, 0}, 0.1);
  return tensor;
}

@expose
fn tensor3() {
  var tensor = Tensor {};
  tensor.init(TensorType::f64, Array<int> {1, 1});
  tensor.add(Array<int> {0, 0}, 3.14);
  return tensor;
}

// @expose
// fn gaussianND() {
//   var gaussian = GaussianND {};
//   var tensor = Tensor {};
//   tensor.init(TensorType::f64, [1, 1]);
//   tensor.add([0, 0], 0.0);
//   gaussian.learn(tensor);
//   return gaussian;
// }

type Foo {
  a: int?;
}

@expose
fn foo(): Foo {
  return Foo {};
}

@expose
fn task_with_params(different: String, age: int): String {
  return different;
}

enum Confidence {
  High;
  Medium;
  Low;
}

@expose
fn enum() {
  return TimeZone::Europe_Andorra;
}

@expose
@write
fn table2(): Table<any?> {
  var a = nodeTime<any?> {};

  for (var i = 0; i < 10; i++) {
    if (i % 2 == 0) {
      a.setAt(time::new(i, DurationUnit::hours), i);
    } else {
      a.setAt(time::new(i, DurationUnit::hours), null);
    }
  }

  var t = nodeTime::sample(Array<nodeTime<any?>> {a}, null, null, 100, SamplingMode::adaptative, null, null);
  info(t);
  return t;
}

@expose
fn time() {
  var v = 42_s + 1337_us;
  var t = time::new(v.to(DurationUnit::microseconds), DurationUnit::microseconds);
  return t;
}

@expose
fn an_error() {
  throw "this is an error";
}

@expose
fn float_f(f: float?) {
  return f;
}

@expose
fn blockingFn() {
  // this should trigger a timeout as rpc are maxed at 30s by default
  Runtime::sleep(40_s);
}

@expose
fn enumValue() {
  return TimeZone::Europe_Luxembourg;
}

type FooBar {
  tz: TimeZone;
  name: String;
  int: int;
  foo: FooBar?;
  values: Array<any>;
}

@expose
fn foobar() {
  return FooBar {
    tz: TimeZone::Europe_Lisbon,
    name: "John",
    int: 42,
    foo: FooBar {
      tz: TimeZone::Africa_Algiers,
      name: "Nested",
      int: 1337,
      foo: null,
      values: Array<any> {},
    },
    values: Array<any> {"hello world", 42},
  };
}

@expose
fn vtable_test(): Table {
  var table = Table<Array<any>> {};
  var start = time::now();

  table.set_row(0, Array<any> { 0, start });
  table.set_row(0, Array<any> { 1, node<int> { 42 } });
  table.set_row(1, Array<any> { 0, start + 5_min });
  table.set_row(1, Array<any> { 1, node<int> { 50 } });
  table.set_row(2, Array<any> { 0, start + 10_min });
  table.set_row(2, Array<any> { 1, node<float> { 13.37 } });
  table.set_row(3, Array<any> { 0, start + 15_min });
  table.set_row(3, Array<any> { 1, node<float> { 68.99 } });

  return table;
}

@expose
fn print_table(table: Table) {
  println(table);
}

@expose
fn fn_pointer() {
  return project::table;
}

type Bar<T> {
  attr: T?;
}

fn write_string() {
  var writer = GcbWriter { path: "string.gcb" };
  writer.write("Hello world: ${42}");
}

@expose
fn identity(v: any?): any? {
  pprint(v);
  return v;
}

type ArrayContainer {
  arr: Array<int>;
}

@expose
fn array_container(ac: ArrayContainer) {
  pprint(ac);
  return ac;
}

type Contact {
  firstname: String;
  lastname: String;
  age: int;
}

fn sl() {
  var x = ["hello", "world"];
  GcbWriter { path: "stringlit_c.bin" }.write(x);
}

@expose
fn read_stringlit(arr: Array<String>) {
  pprint(arr);
  return arr;
}

fn cc() {
  var t = Table<Contact> {};
  t.set_row(0, Contact { firstname: "John", lastname: "Doe", age: 42 });
  t.set_row(1, Contact { firstname: "Jane", lastname: "Doe", age: 36 });
  GcbWriter { path: "contacts_c.bin" }.write(t);
  var t2 = GcbReader { path: "contacts_c.bin" }.read();
  println(t);
  println(t2);
}

@expose
fn contacts(contacts: Table<Contact>) {
  pprint(contacts);
  return contacts;
}

@expose
fn array_of_int(arr: Array<int>) {
  pprint(arr);
  return arr;
}

@expose
fn array_of_float(arr: Array<float>) {
  pprint(arr);
  return arr;
}

@expose
fn array_of_string(arr: Array<String>) {
  pprint(arr);
  return arr;
}

@expose
fn boom() {
  throw "boom";
}

type Sensor {
  id: String;
  temp: float;
  humidity: float;
}

@expose
fn sensor_table(): Table<Sensor> {
  return Table<Sensor> {
    ["AZ0001", 19.4, 57.1],
    ["AZ0002", 22.5, 15.87],
    ["AZ0003", 4.7, 76.3],
  };
}

fn broke() {
  var value = GeoPoly {
    points: Array<geo> {
      geo {1, 2},
      geo {1.5, 2.01},
      geo {1, 2},
    },
  };
  GcbWriter { path: "polypocket.gcb" }.write(value);

  pprint(value);
}

@expose
fn geo() {
  return geo {1.5, 2.01};
}

@expose
fn geos() {
  return Array<geo> {
    geo {1, 2},
    geo {1.5, 2.01},
    geo {1, 2},
  };
}

@expose
fn periodic_task(): PeriodicTask {
  return PeriodicTask {
    function: project::float_f,
    arguments: Array<any?> {3.14},
    user_id: 12,
    start: 13_time,
    every: duration::new(37, DurationUnit::microseconds),
  };
}

@expose
fn create_nodeTimes() {
  var writer = GcbWriter { path: "nodetimes.gcb" };
  var nt_0 = nodeTime<int> {};
  nt_0.setAt(time::now(), 42);
  nt_0.setAt(time::now(), 1337);
  nt_0.setAt(time::now(), 10);
  writer.write([nt_0]);
}

type Person {
  name: String;
}

@expose
fn table3() {
  var start = time::now();
  var table = Table {
    [start, 3.14, null],
    [start + 1_hour, 3.1415, null],
    [start + 2_hour, 1.5, DurationUnit::days]
  };

  print_serde_print(table);

  return table;
}

fn print_serde_print(value: any) {
  var tmpfile = "tmp.gcb";
  pprint(value);
  GcbWriter { path: tmpfile }.write(value);
  println("serde_print:");
  pprint(GcbReader { path: tmpfile }.read());
  File::delete(tmpfile);
}

fn array4() {
  var arr = [];
  arr.add(null);
  arr.add(null);
  arr.add(DurationUnit::days);

  print_serde_print(arr);
}

type CustomType {
  string: String;
  int: int;
  float: float;
  bool: bool;
  char: char;
  enum: TimeZone;
}
type Named {
  name: String;
}

@expose
fn std_bool() {
  return true;
}

@expose
fn std_int() {
  return 0;
}

@expose
fn std_int_min_number() {
  return -9007199254740991;
}

@expose
fn std_int_min_bigint() {
  return int::min;
}

@expose
fn std_int_max_number() {
  return 9007199254740991;
}

@expose
fn std_int_max_bigint() {
  return int::max;
}

type MyRow {
  id: int;
  temp: float;
  data: Named;
}

@expose
fn some_table() {
  return Table<MyRow> {
    [0, 10.5, Named { name: "one" }],
    [1, 11.5, Named { name: "two" }],
    [2, 20.5, Named { name: "three" }],
    [3, 30.5, Named { name: "four" }],
  };
}

@expose
fn gonna_timeout() {
  Runtime::sleep(30s);
  return 42;
}

@expose
fn get_node() {
  return n;
}

@expose
fn get_node_time() {
  return nt;
}

@expose
fn get_node_list() {
  return nl;
}

@expose
fn get_node_index() {
  return ni;
}

@expose
fn get_node_geo() {
  return ng;
}